// Generated by CoffeeScript 1.12.7
(function () {
	var Bootstrap4ImagePicker, Bootstrap4ImagePickerDetailPanel, Bootstrap4ImagePickerOption, Bootstrap4ImagePickerSearchBar, both_array_are_equal, sanitized_options,
		bind = function (fn, me) {
			return function () {
				return fn.apply(me, arguments);
			};
		},
		indexOf = [].indexOf || function (item) {
			for (var i = 0, l = this.length; i < l; i++) {
				if (i in this && this[i] === item) return i;
			}
			return -1;
		};

	jQuery.fn.extend({
		bs4ImagePicker: function (opts) {
			if (opts == null) {
				opts = {};
			}
			return this.each(function () {
				var select;
				select = jQuery(this);
				if (select.data("picker")) {
					select.data("picker").destroy();
				}
				select.data("picker", new Bootstrap4ImagePicker(this, sanitized_options(opts)));
				if (opts.initialized != null) {
					return opts.initialized.call(select.data("picker"));
				}
			});
		}
	});

	sanitized_options = function (opts) {
		var default_options;
		default_options = {
			hide_select: true,
			show_label: false,
			limit: void 0,
			initialized: void 0,
			changed: void 0,
			clicked: void 0,
			selected: void 0,
			limit_reached: void 0,
			search_handler: void 0,
			tooltip_options: {
				placement: 'bottom',
				title: 'Click to Clear'
			},
			template: {
				wrapper: "<div class='image-picker p-2 m-2 border'>",
				control_wrapper: "<div class='row border controls'>",
				list_wrapper: "<div class='row border grid'>",
				search: "<div class='col-12 m-2 inner-addon right-addon'><i class='fa fa-search'></i><input type='text' class='form-control' placeholder='Search for option ...'></div>",
				detail_label: "<div class='col-2 text-center cursor-default m-2 d-inline' data-toggle='tooltip'><span class='badge badge-info'></span> Selected</div>",
				filter_label: "<div class='col-2 text-center cursor-default m-2 d-inline'>Showing <span class='badge badge-warning'></span></div>",
				filter_clear: "<div class='col-2 mb-2'><div class='btn btn-rounded btn-block btn-sm btn-outline-warning'>Clear Filter</div></div>",
				filter_selected_only: "<div class='col-2 mb-2'><div class='btn btn-rounded btn-block btn-sm btn-outline-success'>Show Selected Items</div></div>",
				filter_unselected_only: "<div class='col-2 mb-2'><div class='btn btn-rounded btn-block btn-sm btn-outline-primary'>Show Unselected Items</div></div>",
				group_wrapper: "<div class='col-12 row'>",
				group_title: "<h2 class='font-bold'>",
				item: "<div class='grid-item my-2 col-lg-3 col-md-4 col-sm-6 col-xs-12'> <div class='card'> <content/> </div> </div>",
				image: "<img class='card-img-top'>",
				label: "<div class='card-body'> <h3 class='text-center card-title'><content/></h3> </div>",
				check: "<i class='fa fa-4x fa-check check-mark' style='position: absolute;'></i>"
			}
		};
		return jQuery.extend(default_options, opts);
	};

	both_array_are_equal = function (a, b) {
		var i, j, len, x;
		if ((!a || !b) || (a.length !== b.length)) {
			return false;
		}
		a = a.slice(0);
		b = b.slice(0);
		a.sort();
		b.sort();
		for (i = j = 0, len = a.length; j < len; i = ++j) {
			x = a[i];
			if (b[i] !== x) {
				return false;
			}
		}
		return true;
	};

	Bootstrap4ImagePicker = (function () {
		function Bootstrap4ImagePicker(select_element, options1) {
			this.options = options1 != null ? options1 : {};
			this.sync_picker_with_select = bind(this.sync_picker_with_select, this);
			this.select_element = jQuery(select_element);
			this.multiple = this.select_element.attr("multiple") === "multiple";
			if (this.select_element.data("limit") != null) {
				this.options.limit = parseInt(this.select_element.data("limit"));
			}
			this.build_and_append_picker();
		}

		Bootstrap4ImagePicker.prototype.destroy = function () {
			var j, len, option, ref;
			ref = this.picker_options;
			for (j = 0, len = ref.length; j < len; j++) {
				option = ref[j];
				option.destroy();
			}
			this.picker.remove();
			this.select_element.off("change", this.sync_picker_with_select);
			this.select_element.removeData("picker");
			return this.select_element.show();
		};

		Bootstrap4ImagePicker.prototype.build_and_append_picker = function () {
			if (this.options.hide_select) {
				this.select_element.hide();
			}
			this.select_element.on("change", this.sync_picker_with_select);
			if (this.picker != null) {
				this.picker.remove();
			}
			this.create_picker();
			this.select_element.after(this.picker);
			return this.sync_picker_with_select();
		};

		Bootstrap4ImagePicker.prototype.sync_picker_with_select = function () {
			var j, len, option, ref;
			ref = this.picker_options;
			for (j = 0, len = ref.length; j < len; j++) {
				option = ref[j];
				if (option.is_selected()) {
					option.mark_as_selected();
				} else {
					option.unmark_as_selected();
				}
			}
			return this.details.update_details();
		};

		Bootstrap4ImagePicker.prototype.create_picker = function () {
			this.picker_options = [];
			this.picker = jQuery(this.options.template.wrapper);
			this.picker_control = jQuery(this.options.template.control_wrapper);
			this.picker_list = jQuery(this.options.template.list_wrapper);
			this.picker.append(this.picker_control);
			this.picker.append(this.picker_list);
			this.search = new Bootstrap4ImagePickerSearchBar(this, this.options);
			this.picker_control.append(this.search.element);
			this.details = new Bootstrap4ImagePickerDetailPanel(this, this.options, this.picker_control);
			this.recursively_parse_option_groups(this.select_element, this.picker_list);
			return this.picker;
		};

		Bootstrap4ImagePicker.prototype.recursively_parse_option_groups = function (scoped_dom, target_container) {
			var container, j, k, len, len1, option, option_group, ref, ref1, results;
			ref = scoped_dom.children("optgroup");
			for (j = 0, len = ref.length; j < len; j++) {
				option_group = ref[j];
				option_group = jQuery(option_group);
				container = jQuery(this.options.template.group_wrapper);
				container.append(jQuery(this.options.template.group_title).append(option_group.attr("label")));
				target_container.append(container);
				this.recursively_parse_option_groups(option_group, container);
			}
			ref1 = (function () {
				var l, len1, ref1, results1;
				ref1 = scoped_dom.children("option");
				results1 = [];
				for (l = 0, len1 = ref1.length; l < len1; l++) {
					option = ref1[l];
					results1.push(new Bootstrap4ImagePickerOption(option, this, this.options));
				}
				return results1;
			}).call(this);
			results = [];
			for (k = 0, len1 = ref1.length; k < len1; k++) {
				option = ref1[k];
				this.picker_options.push(option);
				if (!option.has_image()) {
					continue;
				}
				results.push(target_container.append(option.node));
			}
			return results;
		};

		Bootstrap4ImagePicker.prototype.has_implicit_blanks = function () {
			var option;
			return ((function () {
				var j, len, ref, results;
				ref = this.picker_options;
				results = [];
				for (j = 0, len = ref.length; j < len; j++) {
					option = ref[j];
					if (option.is_blank() && !option.has_image()) {
						results.push(option);
					}
				}
				return results;
			}).call(this)).length > 0;
		};

		Bootstrap4ImagePicker.prototype.selected_values = function () {
			if (this.multiple) {
				return this.select_element.val() || [];
			} else {
				return [this.select_element.val()];
			}
		};

		Bootstrap4ImagePicker.prototype.toggle = function (imagepicker_option, original_event) {
			var new_values, old_values, selected_value;
			old_values = this.selected_values();
			selected_value = imagepicker_option.value().toString();
			if (this.multiple) {
				if (indexOf.call(this.selected_values(), selected_value) >= 0) {
					new_values = this.selected_values();
					new_values.splice(jQuery.inArray(selected_value, old_values), 1);
					this.select_element.val([]);
					this.select_element.val(new_values);
				} else {
					if ((this.options.limit != null) && this.selected_values().length >= this.options.limit) {
						if (this.options.limit_reached != null) {
							this.options.limit_reached.call(this.select_element);
						}
					} else {
						this.select_element.val(this.selected_values().concat(selected_value));
					}
				}
			} else {
				if (this.has_implicit_blanks() && imagepicker_option.is_selected()) {
					this.select_element.val("");
				} else {
					this.select_element.val(selected_value);
				}
			}
			if (!both_array_are_equal(old_values, this.selected_values())) {
				this.select_element.change();
				if (this.options.changed != null) {
					return this.options.changed.call(this.select_element, old_values, this.selected_values(), original_event);
				}
			}
		};

		Bootstrap4ImagePicker.prototype.clear_selected = function () {
			var piker;
			piker = this;
			return function (e) {
				return piker.select_element.val("").trigger('change');
			};
		};

		return Bootstrap4ImagePicker;

	})();

	Bootstrap4ImagePickerOption = (function () {
		function Bootstrap4ImagePickerOption(option_element, picker1, options1) {
			this.picker = picker1;
			this.options = options1 != null ? options1 : {};
			this.click_handler = bind(this.click_handler, this);
			this.option_element = jQuery(option_element);
			this.create_node();
		}

		Bootstrap4ImagePickerOption.prototype.do_search = function (filter) {
			var text;
			if (this.option_element.data("img-label")) {
				text = this.option_element.data("img-label");
			}
			text += ' ' + this.option_element.text();
			return text.toLowerCase().indexOf(filter) > -1;
		};

		Bootstrap4ImagePickerOption.prototype.destroy = function () {
			return this.node.find(".grid-item").off("click", this.click_handler);
		};

		Bootstrap4ImagePickerOption.prototype.has_image = function () {
			return this.option_element.data("img-src") != null;
		};

		Bootstrap4ImagePickerOption.prototype.is_blank = function () {
			return !((this.value() != null) && this.value() !== "");
		};

		Bootstrap4ImagePickerOption.prototype.is_selected = function () {
			var select_value;
			select_value = this.picker.select_element.val();
			if (this.picker.multiple) {
				return jQuery.inArray(this.value(), select_value) >= 0;
			} else {
				return this.value() === select_value;
			}
		};

		Bootstrap4ImagePickerOption.prototype.mark_as_selected = function () {
			if (!this.check) {
				this.check = jQuery(this.options.template.check);
				return this.node.find(".card").addClass("selected").append(this.check);
			}
		};

		Bootstrap4ImagePickerOption.prototype.unmark_as_selected = function () {
			if (this.check) {
				this.check.remove();
				this.check = null;
			}
			return this.node.find(".card").removeClass("selected");
		};

		Bootstrap4ImagePickerOption.prototype.value = function () {
			return this.option_element.val();
		};

		Bootstrap4ImagePickerOption.prototype.label = function () {
			if (this.option_element.data("img-label")) {
				return this.option_element.data("img-label");
			} else {
				return this.option_element.text();
			}
		};

		Bootstrap4ImagePickerOption.prototype.click_handler = function (event) {
			this.picker.toggle(this, event);
			if (this.options.clicked != null) {
				this.options.clicked.call(this.picker.select_element, this, event);
			}
			if ((this.options.selected != null) && this.is_selected()) {
				return this.options.selected.call(this.picker.select_element, this, event);
			}
		};

		Bootstrap4ImagePickerOption.prototype.create_node = function () {
			var image, imgAlt, imgClass, label;
			this.node = jQuery(this.options.template.item);
			image = jQuery(this.options.template.image);
			image.attr("src", this.option_element.data("img-src"));
			label = jQuery(this.options.template.label);
			imgClass = this.option_element.data("img-class");
			if (imgClass) {
				this.node.addClass(imgClass);
				image.addClass(imgClass);
			}
			imgAlt = this.option_element.data("img-alt");
			if (imgAlt) {
				image.attr('alt', imgAlt);
			}
			label.find('content').replaceWith(this.label());
			this.node.on("click", this.click_handler);
			this.node.find('content').replaceWith(this.options.show_label ? image.add(label) : image);
			return this.node;
		};

		return Bootstrap4ImagePickerOption;

	})();

	Bootstrap4ImagePickerDetailPanel = (function () {
		function Bootstrap4ImagePickerDetailPanel(picker_obj, options1, element1) {
			this.picker_obj = picker_obj;
			this.options = options1 != null ? options1 : {};
			this.element = element1 != null ? element1 : {};
			this.selected = jQuery(this.options.template.detail_label);
			this.selected.on('click', this.picker_obj.clear_selected());
			this.selected.tooltip(this.options.tooltip_options);
			this.element.append(this.selected);
			this.filtered = jQuery(this.options.template.filter_label);
			this.element.append(this.filtered);
			this.filter_clear = jQuery(this.options.template.filter_clear);
			this.filter_clear.on('click', this.picker_obj.search.clear_search());
			this.element.append(this.filter_clear);
			this.show_selected = jQuery(this.options.template.filter_selected_only);
			this.show_selected.on('click', this.picker_obj.search.show_selected(this.picker_obj));
			this.element.append(this.show_selected);
			this.show_unselected = jQuery(this.options.template.filter_unselected_only);
			this.show_unselected.on('click', this.picker_obj.search.show_unselected(this.picker_obj));
			this.element.append(this.show_unselected);
			this.update_details();
			this.element;
		}

		Bootstrap4ImagePickerDetailPanel.prototype.update_details = function () {
			this.selected_details();
			return this.filtered_details();
		};

		Bootstrap4ImagePickerDetailPanel.prototype.selected_details = function () {
			var select, total;
			total = this.picker_obj.picker_options.length;
			select = this.picker_obj.selected_values().length;
			this.selected.find('.badge.badge-info').html(select + " of " + total);
			if (select) {
				return this.selected.removeClass('cursor-default').addClass('cursor-clickable');
			} else {
				return this.selected.removeClass('cursor-clickable').addClass('cursor-default');
			}
		};

		Bootstrap4ImagePickerDetailPanel.prototype.filtered_details = function () {
			var filtered_count, total;
			total = this.picker_obj.picker_options.length;
			filtered_count = this.picker_obj.search.filtered_count;
			this.filtered.find('.badge.badge-warning').html((total - filtered_count) + " of " + total);
			if (filtered_count) {
				return this.filtered.removeClass('cursor-default').addClass('cursor-clickable');
			} else {
				return this.filtered.removeClass('cursor-clickable').addClass('cursor-default');
			}
		};

		return Bootstrap4ImagePickerDetailPanel;

	})();

	Bootstrap4ImagePickerSearchBar = (function () {
		function Bootstrap4ImagePickerSearchBar(picker_obj, options1) {
			this.picker_obj = picker_obj;
			this.options = options1 != null ? options1 : {};
			this.filtered_count = 0;
			this.element = jQuery(this.options.template.search);
			this.element.find('input').on("change paste keyup", this.search_handler(this.picker_obj, this.options));
			this.element;
		}

		Bootstrap4ImagePickerSearchBar.prototype.show_selected = function (picker) {
			var searchbar;
			searchbar = this;
			return function (e) {
				searchbar.filtered_count = 0;
				jQuery.grep(picker.picker_options, (function (element, index) {
					var r;
					r = element.is_selected();
					if (!r) {
						searchbar.filtered_count += 1;
					}
					return element.node.toggle(r);
				}));
				return picker.details.update_details();
			};
		};

		Bootstrap4ImagePickerSearchBar.prototype.show_unselected = function (picker) {
			var searchbar;
			searchbar = this;
			return function (e) {
				searchbar.filtered_count = 0;
				jQuery.grep(picker.picker_options, (function (element, index) {
					var r;
					r = element.is_selected();
					if (r) {
						searchbar.filtered_count += 1;
					}
					return element.node.toggle(!r);
				}));
				return picker.details.update_details();
			};
		};

		Bootstrap4ImagePickerSearchBar.prototype.clear_search = function () {
			var searchbar;
			searchbar = this;
			return function (e) {
				return searchbar.element.find('input').val("").trigger('change');
			};
		};

		Bootstrap4ImagePickerSearchBar.prototype.search_handler = function (picker, options) {
			var searchbar;
			searchbar = this;
			return function (e) {
				var q;
				searchbar.filtered_count = 0;
				if (!options.search_handler) {
					q = jQuery(this).val();
					jQuery.grep(picker.picker_options, (function (element, index) {
						var r;
						r = element.do_search(q);
						if (!r) {
							searchbar.filtered_count += 1;
						}
						return element.node.toggle(r);
					}));
				} else {
					options.search_handler();
				}
				return picker.details.update_details();
			};
		};

		return Bootstrap4ImagePickerSearchBar;

	})();

}).call(this);

//# sourceMappingURL=bootstrap4-image-picker.js.map
